https://www.geeksforgeeks.org/how-to-display-multiple-images-in-one-window-using-opencv-python/?ref=rp

Controller +inputbox --> controller --> pokemon --> controller
1                 2          3              4           5
yes           yes          yes        yes        no
5. takes image url and then generates sprite

### Delete inputbox. 

Code for the controller
    screen = pygame.display.set_mode()      
    clock = pygame.time.Clock()
    input_box1 = InputBox(100, 100, 140, 32)
    input_boxes = [input_box1]
    done = False
    file ='assets/backgroundImage3.png'
    screen.blit(pygame.image.load(file), (0,0))
    rect = pygame.Rect(input_box1)
    colorOff = pygame.Color('lightskyblue3')
    colorOn = pygame.Color('dodgerblue2')
    font = pygame.font.Font(None, 32)
    color = colorOff
    text = ''
    txt_surface = font.render(text, True, color)
    active = False
    image_str =''
    while not done:
        # screen.fill('white')
        for event in pygame.event.get():
          if event.type == pygame.MOUSEBUTTONDOWN:
            if rect.collidepoint(event.pos):
                active = not active
            else:
                active = False
            color = colorOn if active else colorOff
          if event.type == pygame.KEYDOWN:
              if active: 
                  if event.key == pygame.K_RETURN:
                      image_str = Pokemon().pokemonsprite(pokemonname=text)
                      text =''
                      active = False
                      done = True
                  elif event.key == pygame.K_BACKSPACE:
                      text = text[:-1]
                      pygame.display.update()
                  else:
                      text += event.unicode
                  txt_surface = font.render(text, True, color)
          width = max(200, txt_surface.get_width()+10)
          rect.w = width
          screen.blit(txt_surface, (rect.x+5, rect.y+5))
          pygame.draw.rect(screen, color, rect, 2) 
          pygame.display.flip()
          clock.tick(30)
    txt_surface = font.render(text, True, color)
    image_file = io.BytesIO(image_str)
    print(image_file)
    image = pygame.image.load(image_file)
    print(image)
    screen.blit(pygame.image.load(file), (0,0))
    screen.blit(image, (self.displayx/5,self.displayy))
    pygame.display.update() 







petloop original


 def petloop(self):
    character = Player(self.displayx / 2, 50)
    ground = Block(self.displayx, self.displayy - 20, True)
    all_sprites = pygame.sprite.Group()
    surfaceblocks = pygame.sprite.Group()
    all_sprites.add(character, ground)
    surfaceblocks.add(ground)
    keyupallow=False
    done = False
    colorOff = pygame.Color('lightskyblue3')
    colorOn = pygame.Color('dodgerblue2')
    font = pygame.font.Font(None, 32)
    color = colorOff
    text = ''
    txt_surface = font.render(text, True, color)
    active = False
    image_str =''
    while self.screen == 5:
  #EVENT LOOP
      rect = pygame.Rect(100, 100, 160, 32)
      # pygame.draw.rect(self.display, color, rect, 2)
      for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
          keyupallow=True
          # if event.key == pygame.K_a or event.key == pygame.K_LEFT:
          #   character.control(-2)
          # elif event.key == pygame.K_d or event.key == pygame.K_RIGHT:
          #   character.control(2)
          # elif event.key == pygame.K_SPACE or event.key == pygame.K_w or event.key == pygame.K_UP:
          #   character.jump()
          # elif event.key == pygame.K_q:
          #   self.screen = 8
          if event.key == pygame.K_LEFT:
            character.control(-2)
          elif event.key == pygame.K_RIGHT:
            character.control(2)
          elif event.key == pygame.K_SPACE or event.key == pygame.K_UP:
            character.jump()
          elif event.key == pygame.K_q:
            self.screen = 8
          elif active: 
            if event.key == pygame.K_RETURN:
              print(text)
              image_str = Pokemon().pokemonsprite(pokemonname=text)
              print(text)
              text =''
              active = True
            elif event.key == pygame.K_BACKSPACE:
              text = text[:-1]
              pygame.display.update()
            else:
              text += event.unicode
              txt_surface = font.render(text, True, color)
        elif event.type==pygame.KEYUP and keyupallow:
          if event.key == pygame.K_a or event.key == pygame.K_LEFT:
            character.control(2)
          elif event.key == pygame.K_d or event.key == pygame.K_RIGHT:
            character.control(-2)
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if rect.collidepoint(event.pos):
              active = not active
            else:
              active = False
            color = colorOn if active else colorOff

      charloc = character.getloc()
      platform = pygame.sprite.spritecollideany(character, surfaceblocks)
      if platform:
        platformy = platform.getloc()[1]
        character.stopfall(platformy)
      else:
        character.fall()
      if charloc[0] > self.displayx - 10:  #"-10" to account for player width
        self.game = 0
        self.screen = 0
      elif charloc[0] < 0:
        character.override(charloc[0] + 5, charloc[1])
      if charloc[1] > self.displayy:
        character.override(charloc[0], 0)
      #^^if there's a glitch and the character's outside the screen, reset locatio
      width = max(200, txt_surface.get_width()+10)
      rect.w = width
      
      self.background = pygame.image.load(self.background_images[3])
      self.background = pygame.transform.scale(self.background,
                                             (self.displayx, self.displayy))

      self.display.blit(self.background, (0, 0))
      self.display.blit(txt_surface, (rect.x+5, rect.y+5))
      all_sprites.draw(self.display)
      character.update()
      rect = pygame.Rect(100,100,160,32)
      pygame.draw.rect(self.display, color, rect, 2) 
      pygame.display.flip()
      pygame.time.wait(10)